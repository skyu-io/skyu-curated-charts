{
    "advancedConfiguration": "",
    "advancedConfigurationExistingSecret": "",
    "affinity": {},
    "args": [],
    "auth": {
        "enableLoopbackUser": false,
        "erlangCookie": "",
        "existingErlangSecret": "",
        "existingPasswordSecret": "",
        "password": "",
        "securePassword": true,
        "tls": {
            "autoGenerated": false,
            "caCertificate": "",
            "enabled": false,
            "existingSecret": "",
            "existingSecretFullChain": false,
            "failIfNoPeerCert": true,
            "overrideCaCertificate": "",
            "serverCertificate": "",
            "serverKey": "",
            "sslOptionsPassword": {
                "enabled": false,
                "existingSecret": "",
                "key": "",
                "password": ""
            },
            "sslOptionsVerify": "verify_peer"
        },
        "username": "user"
    },
    "clusterDomain": "cluster.local",
    "clustering": {
        "addressType": "hostname",
        "enabled": true,
        "forceBoot": false,
        "partitionHandling": "autoheal",
        "rebalance": false
    },
    "command": [],
    "commonAnnotations": {},
    "commonLabels": {},
    "communityPlugins": "",
    "configuration": "## Username and password\n##\ndefault_user = {{ .Values.auth.username }}\n{{- if and (not .Values.auth.securePassword) .Values.auth.password }}\ndefault_pass = {{ .Values.auth.password }}\n{{- end }}\n{{- if .Values.clustering.enabled }}\n## Clustering\n##\ncluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s\ncluster_formation.k8s.host = kubernetes.default\ncluster_formation.node_cleanup.interval = 10\ncluster_formation.node_cleanup.only_log_warning = true\ncluster_partition_handling = {{ .Values.clustering.partitionHandling }}\n{{- end }}\n{{ if and .Values.clustering.enabled .Values.loadDefinition.enabled }}\ncluster_formation.target_cluster_size_hint = {{ .Values.replicaCount }}\n{{ end }}\n{{- if .Values.loadDefinition.enabled }}\nload_definitions = {{ .Values.loadDefinition.file }}\n{{- end }}\n# queue master locator\nqueue_master_locator = min-masters\n# enable loopback user\n{{- if not (empty .Values.auth.username) }}\nloopback_users.{{ .Values.auth.username }} = {{ .Values.auth.enableLoopbackUser }}\n{{- else}}\nloopback_users.guest = {{ .Values.auth.enableLoopbackUser }}\n{{- end }}\n{{ template \"rabbitmq.extraConfiguration\" . }}\n{{- if .Values.auth.tls.enabled }}\nssl_options.verify = {{ .Values.auth.tls.sslOptionsVerify }}\nlisteners.ssl.default = {{ .Values.service.ports.amqpTls }}\nssl_options.fail_if_no_peer_cert = {{ .Values.auth.tls.failIfNoPeerCert }}\nssl_options.cacertfile = /opt/bitnami/rabbitmq/certs/ca_certificate.pem\nssl_options.certfile = /opt/bitnami/rabbitmq/certs/server_certificate.pem\nssl_options.keyfile = /opt/bitnami/rabbitmq/certs/server_key.pem\n{{- if .Values.auth.tls.sslOptionsPassword.enabled }}\nssl_options.password = {{ template \"rabbitmq.tlsSslOptionsPassword\" . }}\n{{- end }}\n{{- end }}\n{{- if .Values.ldap.enabled }}\nauth_backends.1.authn = ldap\nauth_backends.1.authz = {{ ternary \"ldap\" \"internal\" .Values.ldap.authorisationEnabled }}\nauth_backends.2 = internal\n{{- $host :=  list }}\n{{- $port :=  ternary 636 389 .Values.ldap.tls.enabled }}\n{{- if .Values.ldap.uri }}\n{{- $hostPort := get (urlParse .Values.ldap.uri) \"host\" }}\n{{- $host = list (index (splitList \":\" $hostPort) 0) -}}\n{{- if (contains \":\" $hostPort) }}\n{{- $port = index (splitList \":\" $hostPort) 1 -}}\n{{- end }}\n{{- end }}\n{{- range $index, $server := concat $host .Values.ldap.servers }}\nauth_ldap.servers.{{ add $index 1 }} = {{ $server }}\n{{- end }}\nauth_ldap.port = {{ coalesce .Values.ldap.port $port }}\n{{- if or .Values.ldap.user_dn_pattern .Values.ldap.userDnPattern }}\nauth_ldap.user_dn_pattern = {{ coalesce .Values.ldap.user_dn_pattern .Values.ldap.userDnPattern }}\n{{- end }}\n{{- if .Values.ldap.basedn }}\nauth_ldap.dn_lookup_base = {{ .Values.ldap.basedn }}\n{{- end }}\n{{- if .Values.ldap.uidField }}\nauth_ldap.dn_lookup_attribute = {{ .Values.ldap.uidField }}\n{{- end }}\n{{- if .Values.ldap.binddn }}\nauth_ldap.dn_lookup_bind.user_dn = {{ .Values.ldap.binddn }}\nauth_ldap.dn_lookup_bind.password = {{ required \"'ldap.bindpw' is required when 'ldap.binddn' is defined\" .Values.ldap.bindpw }}\n{{- end }}\n{{- if .Values.ldap.tls.enabled }}\nauth_ldap.use_ssl = {{ not .Values.ldap.tls.startTls }}\nauth_ldap.use_starttls = {{ .Values.ldap.tls.startTls }}\n{{- if .Values.ldap.tls.CAFilename }}\nauth_ldap.ssl_options.cacertfile = {{ .Values.ldap.tls.certificatesMountPath }}/{{ .Values.ldap.tls.CAFilename }}\n{{- end }}\n{{- if .Values.ldap.tls.certFilename }}\nauth_ldap.ssl_options.certfile = {{ .Values.ldap.tls.certificatesMountPath }}/{{ .Values.ldap.tls.certFilename }}\nauth_ldap.ssl_options.keyfile = {{ .Values.ldap.tls.certificatesMountPath }}/{{ required \"'ldap.tls.certKeyFilename' is required when 'ldap.tls.certFilename' is defined\" .Values.ldap.tls.certKeyFilename }}\n{{- end }}\n{{- if .Values.ldap.tls.skipVerify }}\nauth_ldap.ssl_options.verify = verify_none\nauth_ldap.ssl_options.fail_if_no_peer_cert = false\n{{- else if .Values.ldap.tls.verify }}\nauth_ldap.ssl_options.verify = {{ .Values.ldap.tls.verify }}\n{{- end }}\n{{- end }}\n{{- end }}\n{{- if .Values.metrics.enabled }}\n## Prometheus metrics\n##\nprometheus.tcp.port = {{ .Values.containerPorts.metrics }}\n{{- end }}\n{{- if .Values.memoryHighWatermark.enabled }}\n## Memory Threshold\n##\ntotal_memory_available_override_value = {{ include \"rabbitmq.toBytes\" .Values.resources.limits.memory }}\nvm_memory_high_watermark.{{ .Values.memoryHighWatermark.type }} = {{ .Values.memoryHighWatermark.values }}\n## TCP Listen Options\n##\ntcp_listen_options.backlog = {{ .Values.tcpListenOptions.backlog }}\ntcp_listen_options.nodelay = {{ .Values.tcpListenOptions.nodelay }}\ntcp_listen_options.linger.on      = {{ .Values.tcpListenOptions.linger.lingerOn }}\ntcp_listen_options.linger.timeout = {{ .Values.tcpListenOptions.linger.timeout }}\ntcp_listen_options.keepalive = {{ .Values.tcpListenOptions.keepalive }}\n{{- end }}",
    "configurationExistingSecret": "",
    "containerPorts": {
        "amqp": 5672,
        "amqpTls": 5671,
        "dist": 25672,
        "epmd": 4369,
        "manager": 15672,
        "metrics": 9419
    },
    "containerSecurityContext": {
        "allowPrivilegeEscalation": false,
        "capabilities": {
            "drop": [
                "ALL"
            ]
        },
        "enabled": true,
        "runAsNonRoot": true,
        "runAsUser": 1001,
        "seccompProfile": {
            "type": "RuntimeDefault"
        }
    },
    "customLivenessProbe": {},
    "customReadinessProbe": {},
    "customStartupProbe": {},
    "diagnosticMode": {
        "args": [
            "infinity"
        ],
        "command": [
            "sleep"
        ],
        "enabled": false
    },
    "dnsConfig": {},
    "dnsPolicy": "",
    "enableServiceLinks": true,
    "extraConfiguration": "#default_vhost = {{ .Release.Namespace }}-vhost\n#disk_free_limit.absolute = 50MB",
    "extraConfigurationExistingSecret": "",
    "extraContainerPorts": [],
    "extraDeploy": [],
    "extraEnvVars": [],
    "extraEnvVarsCM": "",
    "extraEnvVarsSecret": "",
    "extraPlugins": "rabbitmq_auth_backend_ldap",
    "extraSecrets": {},
    "extraSecretsPrependReleaseName": false,
    "extraVolumeMounts": [],
    "extraVolumes": [],
    "featureFlags": "",
    "fullnameOverride": "",
    "global": {
        "imagePullSecrets": [],
        "imageRegistry": "",
        "storageClass": ""
    },
    "hostAliases": [],
    "image": {
        "debug": false,
        "digest": "",
        "pullPolicy": "IfNotPresent",
        "pullSecrets": [],
        "registry": "docker.io",
        "repository": "bitnami/rabbitmq",
        "tag": "3.12.8-debian-11-r0"
    },
    "ingress": {
        "annotations": {},
        "enabled": false,
        "existingSecret": "",
        "extraHosts": [],
        "extraPaths": [],
        "extraRules": [],
        "extraTls": [],
        "hostname": "rabbitmq.local",
        "ingressClassName": "",
        "path": "/",
        "pathType": "ImplementationSpecific",
        "secrets": [],
        "selfSigned": false,
        "tls": false
    },
    "initContainers": [],
    "initScripts": {},
    "initScriptsCM": "",
    "initScriptsSecret": "",
    "kubeVersion": "",
    "ldap": {
        "authorisationEnabled": false,
        "basedn": "",
        "binddn": "",
        "bindpw": "",
        "enabled": false,
        "port": "",
        "servers": [],
        "tls": {
            "CAFilename": "",
            "certFilename": "",
            "certKeyFilename": "",
            "certificatesMountPath": "/opt/bitnami/rabbitmq/ldap/certs",
            "certificatesSecret": "",
            "enabled": false,
            "skipVerify": false,
            "startTls": false,
            "verify": "verify_peer"
        },
        "uidField": "",
        "uri": "",
        "userDnPattern": ""
    },
    "lifecycleHooks": {},
    "livenessProbe": {
        "enabled": true,
        "failureThreshold": 6,
        "initialDelaySeconds": 120,
        "periodSeconds": 30,
        "successThreshold": 1,
        "timeoutSeconds": 20
    },
    "loadDefinition": {
        "enabled": false,
        "existingSecret": "",
        "file": "/app/load_definition.json"
    },
    "logs": "-",
    "maxAvailableSchedulers": "",
    "memoryHighWatermark": {
        "enabled": false,
        "type": "relative",
        "values": 0.4
    },
    "metrics": {
        "enabled": false,
        "plugins": "rabbitmq_prometheus",
        "podAnnotations": {
            "prometheus.io/port": "{{ .Values.service.ports.metrics }}",
            "prometheus.io/scrape": "true"
        },
        "prometheusRule": {
            "additionalLabels": {},
            "enabled": false,
            "namespace": "",
            "rules": []
        },
        "serviceMonitor": {
            "annotations": {},
            "enabled": false,
            "honorLabels": false,
            "interval": "30s",
            "jobLabel": "",
            "labels": {},
            "metricRelabelings": [],
            "namespace": "",
            "params": {},
            "path": "",
            "podTargetLabels": {},
            "relabelings": [],
            "scrapeTimeout": "",
            "selector": {},
            "targetLabels": {}
        }
    },
    "nameOverride": "",
    "namespaceOverride": "",
    "networkPolicy": {
        "additionalRules": [],
        "allowExternal": true,
        "enabled": false
    },
    "nodeAffinityPreset": {
        "key": "",
        "type": "",
        "values": []
    },
    "nodeSelector": {},
    "onlineSchedulers": "",
    "pdb": {
        "create": false,
        "maxUnavailable": "",
        "minAvailable": 1
    },
    "persistence": {
        "accessModes": [
            "ReadWriteOnce"
        ],
        "annotations": {},
        "enabled": true,
        "existingClaim": "",
        "labels": {},
        "mountPath": "/bitnami/rabbitmq/mnesia",
        "selector": {},
        "size": "8Gi",
        "storageClass": "",
        "subPath": ""
    },
    "plugins": "rabbitmq_management rabbitmq_peer_discovery_k8s",
    "podAffinityPreset": "",
    "podAnnotations": {},
    "podAntiAffinityPreset": "soft",
    "podLabels": {},
    "podManagementPolicy": "OrderedReady",
    "podSecurityContext": {
        "enabled": true,
        "fsGroup": 1001
    },
    "priorityClassName": "",
    "rbac": {
        "create": true
    },
    "readinessProbe": {
        "enabled": true,
        "failureThreshold": 3,
        "initialDelaySeconds": 10,
        "periodSeconds": 30,
        "successThreshold": 1,
        "timeoutSeconds": 20
    },
    "replicaCount": 1,
    "resources": {
        "limits": {},
        "requests": {}
    },
    "schedulerName": "",
    "service": {
        "allocateLoadBalancerNodePorts": true,
        "annotations": {},
        "annotationsHeadless": {},
        "clusterIP": "",
        "distPortEnabled": true,
        "epmdPortEnabled": true,
        "externalIPs": [],
        "externalTrafficPolicy": "Cluster",
        "extraPorts": [],
        "headless": {
            "annotations": {}
        },
        "labels": {},
        "loadBalancerIP": "",
        "loadBalancerSourceRanges": [],
        "managerPortEnabled": true,
        "nodePorts": {
            "amqp": "",
            "amqpTls": "",
            "dist": "",
            "epmd": "",
            "manager": "",
            "metrics": ""
        },
        "portEnabled": true,
        "portNames": {
            "amqp": "amqp",
            "amqpTls": "amqp-tls",
            "dist": "dist",
            "epmd": "epmd",
            "manager": "http-stats",
            "metrics": "metrics"
        },
        "ports": {
            "amqp": 5672,
            "amqpTls": 5671,
            "dist": 25672,
            "epmd": 4369,
            "manager": 15672,
            "metrics": 9419
        },
        "sessionAffinity": "None",
        "sessionAffinityConfig": {},
        "type": "ClusterIP"
    },
    "serviceAccount": {
        "annotations": {},
        "automountServiceAccountToken": true,
        "create": true,
        "name": ""
    },
    "serviceBindings": {
        "enabled": false
    },
    "servicenameOverride": "",
    "sidecars": [],
    "startupProbe": {
        "enabled": false,
        "failureThreshold": 3,
        "initialDelaySeconds": 10,
        "periodSeconds": 30,
        "successThreshold": 1,
        "timeoutSeconds": 20
    },
    "statefulsetAnnotations": {},
    "statefulsetLabels": {},
    "tcpListenOptions": {
        "backlog": 128,
        "keepalive": false,
        "linger": {
            "lingerOn": true,
            "timeout": 0
        },
        "nodelay": true
    },
    "terminationGracePeriodSeconds": 120,
    "tolerations": [],
    "topologySpreadConstraints": [],
    "ulimitNofiles": "65536",
    "updateStrategy": {
        "type": "RollingUpdate"
    },
    "volumePermissions": {
        "containerSecurityContext": {
            "runAsUser": 0
        },
        "enabled": false,
        "image": {
            "digest": "",
            "pullPolicy": "IfNotPresent",
            "pullSecrets": [],
            "registry": "docker.io",
            "repository": "bitnami/os-shell",
            "tag": "11-debian-11-r90"
        },
        "resources": {
            "limits": {},
            "requests": {}
        }
    }
}